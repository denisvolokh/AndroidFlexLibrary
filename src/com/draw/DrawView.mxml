<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		addedToStage="addedToStageHandler(event)"
		removedFromStage="removedFromStageHandler(event)"
		width="100%" height="100%"> 
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			
			import spark.components.Image;
			import spark.components.SkinnableContainer;
			import spark.filters.DropShadowFilter;
			import spark.primitives.Rect;
			
			//http://saturnboy.com/2010/06/drawer-component-flex-4/
			//http://www.munkiihouse.com/?p=37
			
			public var hideActionBar : Boolean = false;
			
			private var isDrawerOpen : Boolean = false
			
			private var _frontView : SkinnableContainer;
			
			private var frontViewChanged : Boolean;
			
			public function set frontView(component : SkinnableContainer):void
			{
				_frontView = component;
				
				frontViewChanged = true;
			}
			
			public function get frontView():*
			{
				return _frontView;
			}
			
			private var _drawView : UIComponent;
			
			private var drawViewChanged : Boolean = false;

			public function get drawView():UIComponent
			{
				return _drawView;
			}

			public function set drawView(value:UIComponent):void
			{
				_drawView = value;
				
				drawViewChanged = true;
			}
			
			protected function addedToStageHandler(event:Event):void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				stage.addEventListener(TransformGestureEvent.GESTURE_PAN, onSwipeHandler);
			}
			
			private function onSwipeHandler(event : TransformGestureEvent):void
			{
				if (this.effectShowDraw.isPlaying)
					return;
				
				if (event.offsetY < 0)
				{
					this.showDrawer();
				}
			}
			
			protected function removedFromStageHandler(event:Event):void
			{
				stage.removeEventListener(TransformGestureEvent.GESTURE_PAN, onSwipeHandler);
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (frontViewChanged)
				{
					holderFrontView.addElement(frontView);
					moveFrontView.targets = [holderFrontView];
					
					var i : int = 0;
					var l : int = frontView.numElements;
					for(;i < l; i++)
					{
						var child : UIComponent = frontView.getElementAt(i) as UIComponent;
						this.fadeFrontView.targets.push(child);
					} 
					
					holderFrontView.addEventListener(MouseEvent.CLICK, onMouseClickHandler);
					
					frontViewChanged = false;
				}
				
				if (drawViewChanged)
				{
					holderDrawerView.addElement(drawView);
					this.moveFrontView.yTo = drawView.height * (-1);
					
					drawViewChanged = false;
				}
			}
			
			protected function showDrawer():void
			{
				//this.navigator.hideActionBar(true);
				effectShowDraw.play();
			}
			
			protected function hideDrawer():void
			{
				//this.navigator.showActionBar(true);
				effectShowDraw.play(null, true);
			}
			
			private function onMouseClickHandler(event : MouseEvent):void
			{
				if (this.isDrawerOpen)
				{
					this.hideDrawer();
				}
			}
			
			protected function effectShowDraw_effectEndHandler(event:EffectEvent):void
			{
				this.isDrawerOpen = !isDrawerOpen;
				
				for each (var child : UIComponent in this.fadeFrontView.targets)
				{
					child.enabled = (this.isDrawerOpen == false) 	
				}
			}
			
			protected function onCoverImageClickHandler(event : MouseEvent):void
			{
				this.hideDrawer();
			}
			
			protected function effectShowDraw_effectStartHandler(event:EffectEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Parallel id="effectShowDraw" 
					duration="300"
					suspendBackgroundProcessing="true"
					effectStart="effectShowDraw_effectStartHandler(event)"
					effectEnd="effectShowDraw_effectEndHandler(event)">
			<s:children>
				<s:Move id="moveFrontView" 
						yFrom="0"/> 
				<s:Fade id="fadeFrontView" 
						alphaFrom="1" 
						alphaTo=".3"/>
			</s:children>
		</s:Parallel>
		
		<s:DropShadowFilter id="shadowOnDrawer" color="#000000" distance="5" blurX="10" blurY="10" angle="90" alpha=".6"/>
	</fx:Declarations>
	
	<s:Group id="holderDrawerView"
			 width="100%"
			 bottom="0"/>
	
	<s:Group id="holderFrontView"
			 width="100%"
			 height="100%"
			 filters="{ [ shadowOnDrawer ] }"/>
</s:View>

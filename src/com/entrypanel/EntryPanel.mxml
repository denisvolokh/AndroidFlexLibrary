<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   width="100%" height="140"
						   skinClass="com.entrypanel.EntryPanelSkin"
						   addedToStage="skinnablecontainer1_addedToStageHandler(event)"
						   removedFromStage="skinnablecontainer1_removedFromStageHandler(event)">
	<fx:Declarations>
		<s:Animate id="anim" 
				   target="{ this }" 
				   duration="300" 
				   effectEnd="anim_effectEndHandler(event)">
			<s:SimpleMotionPath property="y" 
								valueFrom="{ -(this.height - 10) }" 
								valueTo="-10"/>	
		</s:Animate>
			
			
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.mx_internal;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			
			import spark.components.Label;
			import spark.components.TextInput;
			import spark.components.ViewNavigator;
			
			[SkinPart(required="true")]
			public var labelMessage:Label;
			
			[SkinPart(required="true")]
			public var inputEntry:TextInput;
			
			private static var _host : ViewNavigator;
			
			[Bindable]
			private static var _entryPanel : EntryPanel;
			
			private static var _callBack : Function;
			
			private var _entryText : String;
			
			private var entryTextChanged : Boolean = false;
			
			public function get entryText():String
			{
				return _entryText;
			}
			
			public function set entryText(value:String):void
			{
				_entryText = value;
				
				entryTextChanged = true;
				invalidateProperties();
			}
			
			private var _title : String;
			
			private var titleChanged : Boolean = false;
			
			public function get title():String
			{
				return _title;
			}

			public function set title(value:String):void
			{
				_title = value;
				
				titleChanged = true;
				invalidateProperties();
			}
			
			public static function show(host : ViewNavigator, title : String = "", entryText : String = "", callBackFunction : Function = null):EntryPanel
			{
				if (_entryPanel)
				{
					return _entryPanel
				}
				else
				{
					_entryPanel = new EntryPanel();	
				}
				
				_host = host;
				_callBack = callBackFunction;
				
				_entryPanel.title = title;
				_entryPanel.entryText = entryText;
				
				_host.addElement(_entryPanel);
				_entryPanel.move(0, -10);
				
				_entryPanel.inputEntry.needsSoftKeyboard = true;
				_entryPanel.inputEntry.requestSoftKeyboard();
				
				_entryPanel.anim.play();
				
				return _entryPanel;
			}
			
			public static function hide():void
			{
				_entryPanel.anim.play(null, true);
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (titleChanged && labelMessage)
				{
					titleChanged = false;
					
					labelMessage.text = title;
				}
				
				if (entryTextChanged && inputEntry)
				{
					entryTextChanged = true;
					
					inputEntry.text = entryText;
					inputEntry.selectRange(entryText.length,entryText.length);
				}
			}
			
			/* override protected function getCurrentSkinState():String
			{
				return isReady ? "ready" : "normal";
			} 
			
			private var isReady : Boolean = false; */
			
			protected function anim_effectEndHandler(event:EffectEvent):void
			{
				if (event.effectInstance.mx_internal::playReversed)
				{
					_host.removeElement(_entryPanel);
					_entryPanel = null;	
				}
				else
				{
					//_host.addEventListener(MouseEvent.CLICK, onActiveViewMouseDownHandler);
				}
			}
			
			protected function onHandleKeys(event : KeyboardEvent):void
			{
				if (event.keyCode == 13)
				{
					if (_callBack != null)
					{
						_callBack(inputEntry.text);
					}
					hide();
				}
			}
			
			protected function onKeyboardDeactivate(event : SoftKeyboardEvent):void
			{
				hide();
			}
			
			/* protected function onActiveViewMouseDownHandler(event : MouseEvent):void
			{
				if (_entryPanel)
				{
					hide();	
				}
			} */
			
			protected function skinnablecontainer1_addedToStageHandler(event:Event):void
			{
				NativeApplication.nativeApplication.addEventListener(KeyboardEvent.KEY_DOWN, onHandleKeys);
				_host.addEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, onKeyboardDeactivate);
			}
			
			protected function skinnablecontainer1_removedFromStageHandler(event:Event):void
			{
				NativeApplication.nativeApplication.removeEventListener(KeyboardEvent.KEY_DOWN, onHandleKeys);
				_host.removeEventListener(SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE, onKeyboardDeactivate);
				//_host.removeEventListener(MouseEvent.CLICK, onActiveViewMouseDownHandler);
			}
			
		]]>
	</fx:Script>
	
</s:SkinnableContainer>
